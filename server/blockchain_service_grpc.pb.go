// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: server/blockchain_service.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlockchainService_GetBlockChain_FullMethodName    = "/server.BlockchainService/GetBlockChain"
	BlockchainService_BroadcastTSX_FullMethodName     = "/server.BlockchainService/BroadcastTSX"
	BlockchainService_BroadcastBlock_FullMethodName   = "/server.BlockchainService/BroadcastBlock"
	BlockchainService_CheckStatus_FullMethodName      = "/server.BlockchainService/CheckStatus"
	BlockchainService_AddTSXMempool_FullMethodName    = "/server.BlockchainService/AddTSXMempool"
	BlockchainService_DeleteTSXMempool_FullMethodName = "/server.BlockchainService/DeleteTSXMempool"
	BlockchainService_AddBlock_FullMethodName         = "/server.BlockchainService/AddBlock"
	BlockchainService_Hello_FullMethodName            = "/server.BlockchainService/Hello"
	BlockchainService_AddPeer_FullMethodName          = "/server.BlockchainService/AddPeer"
	BlockchainService_GetPeers_FullMethodName         = "/server.BlockchainService/GetPeers"
	BlockchainService_MineBlock_FullMethodName        = "/server.BlockchainService/MineBlock"
)

// BlockchainServiceClient is the client API for BlockchainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockchainServiceClient interface {
	GetBlockChain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	BroadcastTSX(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error)
	BroadcastBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Response, error)
	CheckStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddTSXMempool(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error)
	DeleteTSXMempool(ctx context.Context, in *DeleteTSXMempoolRequest, opts ...grpc.CallOption) (*Empty, error)
	AddBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Response, error)
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*HelloResponse, error)
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error)
	GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPeersResponse, error)
	MineBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type blockchainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainServiceClient(cc grpc.ClientConnInterface) BlockchainServiceClient {
	return &blockchainServiceClient{cc}
}

func (c *blockchainServiceClient) GetBlockChain(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_GetBlockChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) BroadcastTSX(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_BroadcastTSX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) BroadcastBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_BroadcastBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) CheckStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) AddTSXMempool(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BlockchainService_AddTSXMempool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) DeleteTSXMempool(ctx context.Context, in *DeleteTSXMempoolRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BlockchainService_DeleteTSXMempool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) AddBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_AddBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, BlockchainService_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPeerResponse)
	err := c.cc.Invoke(ctx, BlockchainService_AddPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) GetPeers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeersResponse)
	err := c.cc.Invoke(ctx, BlockchainService_GetPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainServiceClient) MineBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BlockchainService_MineBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainServiceServer is the server API for BlockchainService service.
// All implementations must embed UnimplementedBlockchainServiceServer
// for forward compatibility.
type BlockchainServiceServer interface {
	GetBlockChain(context.Context, *Empty) (*Response, error)
	BroadcastTSX(context.Context, *Transaction) (*Response, error)
	BroadcastBlock(context.Context, *Block) (*Response, error)
	CheckStatus(context.Context, *Request) (*Response, error)
	AddTSXMempool(context.Context, *Transaction) (*Empty, error)
	DeleteTSXMempool(context.Context, *DeleteTSXMempoolRequest) (*Empty, error)
	AddBlock(context.Context, *Block) (*Response, error)
	Hello(context.Context, *Request) (*HelloResponse, error)
	AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error)
	GetPeers(context.Context, *Empty) (*GetPeersResponse, error)
	MineBlock(context.Context, *Empty) (*Response, error)
}

// UnimplementedBlockchainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlockchainServiceServer struct{}

func (UnimplementedBlockchainServiceServer) GetBlockChain(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockChain not implemented")
}
func (UnimplementedBlockchainServiceServer) BroadcastTSX(context.Context, *Transaction) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTSX not implemented")
}
func (UnimplementedBlockchainServiceServer) BroadcastBlock(context.Context, *Block) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) CheckStatus(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedBlockchainServiceServer) AddTSXMempool(context.Context, *Transaction) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTSXMempool not implemented")
}
func (UnimplementedBlockchainServiceServer) DeleteTSXMempool(context.Context, *DeleteTSXMempoolRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTSXMempool not implemented")
}
func (UnimplementedBlockchainServiceServer) AddBlock(context.Context, *Block) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) Hello(context.Context, *Request) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedBlockchainServiceServer) AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedBlockchainServiceServer) GetPeers(context.Context, *Empty) (*GetPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedBlockchainServiceServer) MineBlock(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineBlock not implemented")
}
func (UnimplementedBlockchainServiceServer) mustEmbedUnimplementedBlockchainServiceServer() {}
func (UnimplementedBlockchainServiceServer) testEmbeddedByValue()                           {}

// UnsafeBlockchainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockchainServiceServer will
// result in compilation errors.
type UnsafeBlockchainServiceServer interface {
	mustEmbedUnimplementedBlockchainServiceServer()
}

func RegisterBlockchainServiceServer(s grpc.ServiceRegistrar, srv BlockchainServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlockchainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlockchainService_ServiceDesc, srv)
}

func _BlockchainService_GetBlockChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetBlockChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetBlockChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetBlockChain(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_BroadcastTSX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).BroadcastTSX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_BroadcastTSX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).BroadcastTSX(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_BroadcastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).BroadcastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_BroadcastBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).BroadcastBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).CheckStatus(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_AddTSXMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).AddTSXMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_AddTSXMempool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).AddTSXMempool(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_DeleteTSXMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTSXMempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).DeleteTSXMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_DeleteTSXMempool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).DeleteTSXMempool(ctx, req.(*DeleteTSXMempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_AddBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).AddBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_AddPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_GetPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).GetPeers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainService_MineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainServiceServer).MineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockchainService_MineBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainServiceServer).MineBlock(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockchainService_ServiceDesc is the grpc.ServiceDesc for BlockchainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockchainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.BlockchainService",
	HandlerType: (*BlockchainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockChain",
			Handler:    _BlockchainService_GetBlockChain_Handler,
		},
		{
			MethodName: "BroadcastTSX",
			Handler:    _BlockchainService_BroadcastTSX_Handler,
		},
		{
			MethodName: "BroadcastBlock",
			Handler:    _BlockchainService_BroadcastBlock_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _BlockchainService_CheckStatus_Handler,
		},
		{
			MethodName: "AddTSXMempool",
			Handler:    _BlockchainService_AddTSXMempool_Handler,
		},
		{
			MethodName: "DeleteTSXMempool",
			Handler:    _BlockchainService_DeleteTSXMempool_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _BlockchainService_AddBlock_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _BlockchainService_Hello_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _BlockchainService_AddPeer_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _BlockchainService_GetPeers_Handler,
		},
		{
			MethodName: "MineBlock",
			Handler:    _BlockchainService_MineBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/blockchain_service.proto",
}
